generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Content {
  id          String   @id @default(uuid()) @map("_id")
  contentType String
  contentName String
  soundGroup  String
  subGroup    String?
  createdAt   DateTime @default(now())

  fileId String @unique
  file   File   @relation(fields: [fileId], references: [id])

  constructionkitId String?
  constructionkit   Constructionkit? @relation("KitContents", fields: [constructionkitId], references: [id])

  metadataId String
  metadata   Metadata @relation("ContentMetadata", fields: [metadataId], references: [id])

  // Relations for loops and midis
  loopandmidiLoop Loopandmidi[] @relation("LoopContent")
  loopandmidiMidi Loopandmidi[] @relation("MidiContent")

  // Relations for presets
  presetLoop    Preset[] @relation("PresetLoop")
  presetMidi    Preset[] @relation("PresetMidi")
  presetContent Preset[] @relation("PresetMain")

  // Relation back to default loop
  usedAsDefaultIn Constructionkit[] @relation("DefaultFullLoop")
}

model Loopandmidi {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  soundGroup String
  subGroup   String?
  createdAt  DateTime @default(now())

  loopContentId String?
  loopContent   Content? @relation("LoopContent", fields: [loopContentId], references: [id])

  midiContentId String?
  midiContent   Content? @relation("MidiContent", fields: [midiContentId], references: [id])

  metadataId String
  metadata   Metadata @relation("Metadata_Loopandmidis", fields: [metadataId], references: [id])

  constructionkitId String?
  constructionkit   Constructionkit? @relation("KitLoops", fields: [constructionkitId], references: [id])
}

model Preset {
  id         String   @id @default(uuid()) @map("_id")
  name       String
  createdAt  DateTime @default(now())
  soundGroup String
  subGroup   String?

  loopContentId String?
  loopContent   Content? @relation("PresetLoop", fields: [loopContentId], references: [id])

  midiContentId String?
  midiContent   Content? @relation("PresetMidi", fields: [midiContentId], references: [id])

  presetContentId String?
  presetContent   Content? @relation("PresetMain", fields: [presetContentId], references: [id])

  metadataId String
  metadata   Metadata @relation("PresetMetadata", fields: [metadataId], references: [id])

  constructionkitId String?
  constructionkit   Constructionkit? @relation("KitPresets", fields: [constructionkitId], references: [id])
}

model Constructionkit {
  id          String   @id @default(uuid()) @map("_id")
  kitName     String
  description String?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  metadataId String
  metadata   Metadata @relation("KitMetadata", fields: [metadataId], references: [id])

  contents     Content[]     @relation("KitContents")
  presets      Preset[]      @relation("KitPresets")
  loopAndMidis Loopandmidi[] @relation("KitLoops")

  defaultFullLoopId String
  defaultFullLoop   Content @relation("DefaultFullLoop", fields: [defaultFullLoopId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Metadata {
  id          String   @id @default(uuid()) @map("_id")
  styles      String[]
  moods       String[]
  processing  String[]
  soundDesign String[]
  bpm         String?
  key         String?

  contents         Content[]         @relation("ContentMetadata")
  constructionkits Constructionkit[] @relation("KitMetadata")
  loopAndMidis     Loopandmidi[]     @relation("Metadata_Loopandmidis")
  presets          Preset[]          @relation("PresetMetadata")
}

model File {
  id        String   @id @default(uuid()) @map("_id")
  fileName  String
  awsKey    String
  createdAt DateTime @default(now())
  content   Content?
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  username  String   @unique
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  type      UserType @default(USER)

  constructionkits Constructionkit[]
}

enum UserType {
  ADMIN
  ARTIST
  USER
}
